#!/bin/bash
# Insurgency
# Server Management Script
# Author: Daniel Gibbs
# Website: http://gameservermanagers.com
#
# Modified by Jared Ballou <insurgency@jballou.com>
# https://github.com/jaredballou/linuxgsm

# Version of script
version="300116"

# Filename of the core script for installation
core_script="lgsm-core"

# TODO: Add .lgsm.conf support to pre-load LGSM settings in the event of non-standard installations

# Determine if we are running from a script file, or being piped into bash via curl
if [ "${BASH_SOURCE[0]}" != "" ]; then
	# The name of this script file, used to show the LGSM link properly
	scriptpath=$(readlink -f "${BASH_SOURCE[0]}")
	# The basename of the real script file
	selfname=$(basename "${scriptpath}")
	# Name of this service (will return symlink name for multiple instance support)
	servicename="$(basename $0)"
	# Script root directory
	rootdir="$(dirname "${scriptpath}")"
else
	scriptpath="$(pwd)/${core_script}"
	selfname="${core_script}"
	servicename="${core_script}"
	rootdir="$(pwd)"
fi

# File fetching settings
# Github Branch Select
# Allows for the use of different function files
# from a different repo and/or branch.
githubuser="jaredballou"
githubrepo="linuxgsm"
githubbranch="master"

# Update stale files on the fly using Git.
git_update=0

# Directories

# LGSM Support Files - set ro rootdir for old behavior
lgsmdir="${rootdir}/lgsm"
# Temporary path to store and manipulate settings
settingsdir="${lgsmdir}/settings.tmp"
# Supported Game Data
gamedatadir="${lgsmdir}/gamedata"
# Config path for local instances
scriptcfgdir="${lgsmdir}/cfg/servers"
# Temporary cache location
cachedir="${lgsmdir}/tmp"

# Create all the directories we need
for dir in $(set -o posix; set | grep '^[a-zA-Z0-9]*dir=' $0 | cut -d'=' -f1); do
	if [ ! -e "${!dir}" ]; then
		echo "Creating ${dir} at ${!dir}"
		mkdir -p "${!dir}"
	fi
done

# Debugging, if debugflag exists send output to $debuglog
debugflag="${lgsmdir}/.dev-debug"
debuglog="${lgsmdir}/dev-debug.log"
if [ -f "${debugflag}" ]; then
	exec 5>"${debuglog}"
	BASH_XTRACEFD="5"
	set -x
fi

# Git last commit file (for tracking updates)
lastcommit_file="${cachedir}/lastcommit"

##### Script #####
# Do not edit

fn_getgithubfile(){
filename=$1
exec=$2
fileurl=${3:-$filename}
filepath="${rootdir}/${filename}"
filedir=$(dirname "${filepath}")
# If the function file is missing, then download
if [ ! -f "${filepath}" ]; then
	if [ ! -d "${filedir}" ]; then
		mkdir "${filedir}"
	fi
	githuburl="https://raw.githubusercontent.com/${githubuser}/${githubrepo}/${githubbranch}/${fileurl}"
	echo -e "    fetching ${filename}...\c"

	fetchcmd=curl
	paths="$(command -v ${fetchcmd} 2>/dev/null) $(which ${fetchcmd} >/dev/null 2>&1) /usr/bin/${fetchcmd} /bin/${fetchcmd} /usr/sbin/${fetchcmd} /sbin/${fetchcmd} $(echo $PATH | sed "s/\([:]\|\$\)/\/${fetchcmd} /g")"
	for tp in $paths
	do
		if [ -x $tp ]; then
			fetchcmd=$tp
			break 2
		fi
	done
	# If we have no executable fetchcmd, fail script execution
	if [ ! -x "${fetchcmd}" ]; then
		echo -e "\e[0;31mFAIL\e[0m\n"
		echo -en "Curl is not installed!"
		exit 1
	fi
	curl=$(${fetchcmd} --fail -o "${filepath}" "${githuburl}" 2>&1)
	if [ $? -ne 0 ]; then
		echo -e "\e[0;31mFAIL\e[0m\n"
		echo "${curl}"
		echo -e "${githuburl}\n"
		exit
	else
		echo -e "\e[0;32mOK\e[0m"
	fi	
	if [ "${exec}" ]; then
		chmod +x "${filepath}"
	fi
fi
if [ "${exec}" ]; then
	source "${filepath}"
fi
}

# fn_loadfn
fn_loadfn(){
	scriptfile=${1:-$functionfile}
	functionfile=${scriptfile}
	fn_getgithubfile "functions/${functionfile}" run
	fn_check_github_files "${lgsmdir}" "${lgsmdir}/functions/${functionfile}"
}

if [ "${selfname}" == "${core_script}" ];
then
	fn_loadfn install_lgsm.sh
else
	# Process game configs and load variables needed to run script
	fn_loadfn game_settings.sh

	# Get option from command line and run option parser
	getopt=$1
	core_getopt.sh
fi